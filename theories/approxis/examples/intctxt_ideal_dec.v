From Ltac2 Require Import Ltac2.
Set Default Proof Mode "Classic".
From clutch.approxis Require Import map reltac2 approxis option linked_list.
From clutch.approxis.examples Require Import
  security_aux option symmetric_init
  advantage_laws iterable_expression.
From mathcomp Require Import ssrbool.
Set Default Proof Using "All".
Import map.

Section logrel.
  
  Context `{!approxisRGS Œ£}.

  Variable lrel_msg : lrel Œ£.
  Variable lrel_cipher : lrel Œ£.
  Variable lrel_key : lrel Œ£.

  Variable is_key : val.
  Variable is_ciphertext : val.
  Variable is_plaintext : val.

  Definition left_lrel (œÑ : lrel Œ£) (v : val) : iProp Œ£ := ‚àÉ v', (lrel_car œÑ) v v'.
  Definition right_lrel (œÑ : lrel Œ£) (v : val) : iProp Œ£ := ‚àÉ v', (lrel_car œÑ) v' v.
  Definition half_lrel (œÑ : lrel Œ£) (v : val) : iProp Œ£ := left_lrel œÑ v ‚à® right_lrel œÑ v.

  Definition refines_is_ciphertext_l_prop :=
    ‚àÄ (c : val) K e E A,
        left_lrel lrel_cipher c
      -‚àó refines E (fill K (Val #true)) e A
      -‚àó REL (fill K (is_ciphertext c)) << e @ E : A.

  Definition refines_is_ciphertext_r_prop :=
    ‚àÄ (c : val) K e E A,
        right_lrel lrel_cipher c
      -‚àó refines E e (fill K (Val #true)) A
      -‚àó REL e << (fill K (is_ciphertext c)) @ E : A.

  Definition refines_is_plaintext_l_prop :=
    ‚àÄ (c : val) K e E A,
        left_lrel lrel_msg c
      -‚àó refines E (fill K (Val #true)) e A
      -‚àó REL (fill K (is_plaintext c)) << e @ E : A.

  Definition refines_is_plaintext_r_prop :=
    ‚àÄ (c : val) K e E A,
        right_lrel lrel_msg c
      -‚àó refines E e (fill K (Val #true)) A
      -‚àó REL e << (fill K (is_plaintext c)) @ E : A.

  Hypothesis refines_is_ciphertext_r : refines_is_ciphertext_r_prop. 
  Hypothesis refines_is_ciphertext_l : refines_is_ciphertext_l_prop.
  Hypothesis refines_is_plaintext_r : refines_is_plaintext_r_prop. 
  Hypothesis refines_is_plaintext_l : refines_is_plaintext_l_prop. 

  Definition refines_is_key_l_prop (is_key : val) :=
    ‚àÄ (k : val) K e E A,
        left_lrel lrel_key k
      -‚àó refines E (fill K (Val #true)) e A
      -‚àó REL (fill K (is_key k)) << e @ E : A.

  Definition refines_is_key_r_prop (is_key : val) :=
    ‚àÄ (k : val) K e E A,
        right_lrel lrel_key k
      -‚àó refines E e (fill K (Val #true)) A
      -‚àó REL e << (fill K (is_key k)) @ E : A.
      
  Variable elem_eq : val.

  Lemma half_lrel_pers : ‚àÄ (A : lrel Œ£) x, Persistent (half_lrel A x).
  Proof. intros A x. rewrite /Persistent.
    iIntros "[[%y #H] | [%y #H]]".
    - iModIntro. iLeft. iExists y. iAssumption.
    - iModIntro. iRight. iExists y. iAssumption.
  Qed.

  Hypothesis lrel_msg_comparable : ‚àÄ x y, (Œª x, half_lrel lrel_msg x) x
    -‚àó (Œª x, half_lrel lrel_msg x) y
    -‚àó ‚åúvals_comparable x y‚åù.
  Hypothesis lrel_msg_eq : ‚àÄ x y, lrel_msg x y ‚ä¢ ‚åúx = y‚åù.

  Hypothesis refines_elem_eq_l : refines_elem_eq_l_prop elem_eq
    (Œª x, half_lrel lrel_msg x).
  Hypothesis refines_elem_eq_r : refines_elem_eq_r_prop elem_eq
    (Œª x, half_lrel lrel_msg x).

  #[local] Instance val_inj : Inject val val.
  Proof. unshelve econstructor.
    - exact (Œª x, x).
    - intros x y H'; assumption.
  Defined.

  Definition refines_elem_of_l :=
    @refines_elem_of_l elem_eq _ _ (Œª x, half_lrel lrel_msg x)
      (half_lrel_pers lrel_msg) lrel_msg_comparable refines_elem_eq_l val val_inj.
  Definition refines_elem_of_r :=
    @refines_elem_of_r elem_eq _ _ (Œª x, half_lrel lrel_msg x)
      (half_lrel_pers lrel_msg) lrel_msg_comparable refines_elem_eq_r val val_inj.

  Definition CTXT : val :=
    Œª: "b" "adv" "scheme" "Q_enc" "Q_dec" "Q_lr" "Q_enc_gen",
      let: "record_cipher" := init_linked_list #() in
      let: "enc_scheme" := get_enc_scheme "scheme" #() in
      let: "enc" := get_enc "enc_scheme" in
      let: "dec" := get_dec "enc_scheme" in
      let: "key" := get_keygen "scheme" #() in
      let: "enc_key" := Œª: "msg", add_list "record_cipher" "msg";;
        "enc" "key" "msg" in
      (* FIXME maybe record when called with a valid guess of key *)
      let: "oracle_enc_gen" :=
        q_calls_general_test
          (Œª: "p", is_key (Fst "p") `and` is_plaintext (Snd "p"))
          "Q_enc"
          (Œª: "p", "enc" (Fst "p") (Snd "p")) in
      let: "oracle_enc_gen_curry" :=
        Œª: "k" "msg", "oracle_enc_gen" ("k", "msg") in
      let: "dec_key" := Œª: "msg", "dec" "key" "msg" in
      let: "rr_key_b" :=
        if: "b" then
          Œª: "c", elem_of_linked_list elem_eq "record_cipher" "c"
        else
          Œª: <>, #true in
      let: "oracle_enc_key" :=
        q_calls_general_test is_plaintext "Q_enc" "enc_key" in
      let: "oracle_dec" :=
        q_calls_general_test_eager is_ciphertext "Q_dec" "dec_key" in
      let: "oracle_lr" :=
        q_calls_general_test is_ciphertext "Q_lr" "rr_key_b" in
      let: "b'" := "adv" "oracle_enc_gen_curry"
        "oracle_enc_key" "oracle_dec" "oracle_lr" in
      "b'".

  Definition CTXT' : val :=
    Œª: "b" "adv" "scheme" "Q_enc" "Q_dec" "Q_lr" "Q_enc_gen",
      let: "record" := init_map #() in
      let: "enc_scheme" := get_enc_scheme "scheme" #() in
      let: "enc" := get_enc "enc_scheme" in
      let: "dec" := get_dec "enc_scheme" in
      let: "key" := get_keygen "scheme" #() in
      let: "enc_key" := Œª: "msg",
        let: "c" := "enc" "key" "msg" in
        set "record" "c" "msg"
        in
      (* FIXME maybe record when called with a valid guess of key *)
      let: "oracle_enc_gen" :=
        q_calls_general_test
          (Œª: "p", is_key (Fst "p") `and` is_plaintext (Snd "p"))
          "Q_enc"
          (Œª: "p", "enc" (Fst "p") (Snd "p")) in
      let: "oracle_enc_gen_curry" :=
        Œª: "k" "msg", "oracle_enc_gen" ("k", "msg") in
      let: "dec_key" :=
        if: "b" then
          Œª: "c", "dec" "key" "c"
        else
          Œª: "c",
            "get" "record" "c"
        in
      let: "rr_key_b" :=
        if: "b" then
          Œª: "c", elem_of_linked_list elem_eq "record" "c"
        else
          Œª: <>, #true in

      let: "oracle_enc_key" :=
        q_calls_general_test is_plaintext "Q_enc" "enc_key" in
      let: "oracle_dec" :=
        q_calls_general_test_eager is_ciphertext "Q_dec" "dec_key" in
      let: "oracle_lr" :=
        q_calls_general_test is_ciphertext "Q_lr" "rr_key_b" in
      let: "b'" := "adv" "oracle_enc_gen_curry"
        "oracle_enc_key" "oracle_dec" "oracle_lr" in
      "b'".

  Definition adv_CTXT' : val :=
    Œª: "adv" "enc_oracle" "dec_oracle" "ver_oracle",
      let: "rr_key_b" :=
        Œª: "c",
          let: "decrypted" := "dec_oracle" "c" in
          match: "ver_oracle" "c" with
            | NONE => NONE
            | SOME "b" => if: "b" then
                "decrypted"
              else
                NONE
          end in
      let: "oracle_lr" := "rr_key_b" in
      "adv" "enc_oracle" "oracle_lr".

  Context `{SYM_init}.

  Variable senc : list loc ‚Üí val.
  Variable sdec : list loc ‚Üí val.

  Variable P0l : list loc ‚Üí iProp Œ£.
  Variable P0r : list loc ‚Üí iProp Œ£.

  Variable Pl : list loc ‚Üí iProp Œ£.
  Variable Pr : list loc ‚Üí iProp Œ£.
  Variable Plr : list loc ‚Üí list loc ‚Üí iProp Œ£.

  Definition P0_P_l_prop := ‚àÄ lls, P0l lls -‚àó Pl lls.
  Definition P0_P_r_prop := ‚àÄ rls, P0r rls -‚àó Pr rls.
  Definition P0lr_Plr_prop := ‚àÄ lls rls, P0l lls -‚àó P0r rls -‚àó Plr lls rls.
  Hypothesis P0_P_l : P0_P_l_prop.
  Hypothesis P0_P_r : P0_P_r_prop.
  Hypothesis P0lr_Plr : P0lr_Plr_prop.

  Definition refines_init_scheme_l_prop := forall K e E A,
    (‚àÄ lls,
      P0l lls -‚àó
      refines E
        (fill K (senc lls, sdec lls))
        e A)
    ‚ä¢ refines E
        (fill K (get_enc_scheme sym_scheme #()))
        e A.

  Definition refines_init_scheme_r_prop := forall K e E A,
    (‚àÄ rls,
      P0r rls -‚àó
      refines E
        e
        (fill K (senc rls, sdec rls))
        A)
    ‚ä¢ refines E
        e
        (fill K (get_enc_scheme sym_scheme #()))
        A.

  Hypothesis refines_init_scheme_l : refines_init_scheme_l_prop.

  Hypothesis refines_init_scheme_r : refines_init_scheme_r_prop.

  Definition refines_sym_keygen_couple_prop := forall K K' E A,
    (‚àÄ key,
      (lrel_car lrel_key) key key -‚àó
        refines E
          (fill K  (Val key))
          (fill K' (Val key))
          A)
    ‚ä¢ refines E
        (fill K  (keygen #()))
        (fill K' (keygen #()))
        A.
  Hypothesis refines_sym_keygen_couple : refines_sym_keygen_couple_prop.

  Let lrel_enc_oracle : lrel Œ£ := lrel_enc_oracle lrel_msg lrel_cipher.
  Let lrel_dec_oracle : lrel Œ£ := lrel_dec_oracle lrel_msg lrel_cipher.

  Definition senc_sem_typed_prop :=
    ‚àÄ lls rls (ùí© : namespace) (P : iProp Œ£),
    (‚àÉ (Q : iProp Œ£),
      P ‚ä£‚ä¢
        (Q
      ‚àó Plr lls rls)
    ) ‚Üí
    na_invP ùí© P
      ‚ä¢ refines top (senc lls)
      (senc rls) (lrel_key ‚Üí lrel_msg ‚Üí lrel_cipher).

  Hypothesis senc_sem_typed : senc_sem_typed_prop.

  Definition sdec_sem_typed_prop :=
    ‚àÄ lls rls (ùí© : namespace) (P : iProp Œ£),
    (‚àÉ (Q : iProp Œ£),
      P ‚ä£‚ä¢
        (Q
      ‚àó Plr lls rls)
    ) ‚Üí
    na_invP ùí© P
      ‚ä¢ refines top (sdec lls)
      (sdec rls) (lrel_key ‚Üí lrel_cipher ‚Üí lrel_msg).

  Hypothesis sdec_sem_typed : sdec_sem_typed_prop.

  Lemma forall_lrel_pers : ‚àÄ l l' (A : lrel Œ£),
    Persistent (@ForallSep2 Œ£ val val A l l').
  Proof. intros l l' A.
    apply ForallSep2_pers_is_pers.
    apply lrel_persistent.
  Qed.

  Lemma in_forall2_in_l : ‚àÄ l l' f x,
    x ‚àà l ‚Üí (@ForallSep2 Œ£ val val f l l') ‚ä¢ ‚àÉ y, f x y ‚àó ‚åúy ‚àà l'‚åù.
  Proof. intros l l' f x Hin. iRevert (l').
    iInduction l as [|h t] "IHt"; iIntros (l') "Hforall".
    - destruct l' as [|h' t'].
      + exfalso. apply not_elem_of_nil in Hin.
        assumption.
      + iExFalso; iAssumption.
    - destruct l' as [|h' t'].
      + iExFalso; iAssumption.
      + simpl. iDestruct "Hforall" as "[Hhead Hforall]".
        inversion Hin; subst.
        * iExists h'. iFrame. iPureIntro.
          constructor.
        * iAssert (‚åúx ‚àà t‚åù)%I as "H".
          { iPureIntro; assumption. }
          iPoseProof ("IHt" with "H Hforall") as "H'".
          clear Hin.
          iDestruct "H'" as (y) "[Hf %Hin]".
          iExists y. iFrame.
          iPureIntro; constructor.
          assumption.
  Qed.

  Lemma in_forall2_in_r : ‚àÄ l l' f y,
    y ‚àà l' ‚Üí (@ForallSep2 Œ£ val val f l l') ‚ä¢ ‚àÉ x, f x y ‚àó ‚åúx ‚àà l‚åù.
  Proof. intros l l' f x Hin. iRevert (l).
    iInduction l' as [|h' t'] "IHt"; iIntros (l) "Hforall".
    - destruct l as [|h t].
      + exfalso. apply not_elem_of_nil in Hin.
        assumption.
      + iExFalso; iAssumption.
    - destruct l as [|h t].
      + iExFalso; iAssumption.
      + simpl. iDestruct "Hforall" as "[Hhead Hforall]".
        inversion Hin; subst.
        * iExists h. iFrame. iPureIntro.
          constructor.
        * iAssert (‚åúx ‚àà t'‚åù)%I as "H".
          { iPureIntro; assumption. }
          iPoseProof ("IHt" with "H Hforall") as "H'".
          clear Hin.
          iDestruct "H'" as (y) "[Hf %Hin]".
          iExists y. iFrame.
          iPureIntro; constructor.
          assumption.
  Qed.

End logrel.
